<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.miniproject2.mapper.ItemMapper">

<select id="getBidList" resultMap="itemResultMap" parameterType="ItemList">
    SELECT i.*,
    i.item_start_date <![CDATA[<]]> sysdate() started, 
	i.item_end_date &lt; sysdate() finished
    FROM bid_list bid
    INNER JOIN ItemList i ON bid.fonky_item_num = i.item_num
    WHERE bid.fonky_member_id = #{fonkyMemberId} AND bid.bid_Itr = 1
</select>

<select id="selectBidItr"  resultMap="BidResultMap" resultType="Bid">
	select * from bid_list where fonky_item_num=#{itemNum} and fonky_member_id=#{memberId};
</select>


<!--  즐겨찾기를 클릭했을때 itr을 업데이트 -->
<update id="updateBidItr" parameterType="map">
   UPDATE bid_list
SET bid_itr = #{bidItr}
WHERE fonky_item_num = #{fonkyItemNum} AND fonky_member_id = #{fonkyMemberId};
</update>

<!-- 즐겨찾기를 클릭했을때 즐겨찾기 추가하는 메핑  -->
<insert id="insertBid" parameterType="Bid"	useGeneratedKeys="true" keyProperty="bid_num">
	  INSERT INTO bid_list (fonky_member_id, fonky_item_num) 
    VALUES (#{fonkyMemberId}, #{fonkyItemNum})
</insert>

<!-- 즐겨찾기를 클릭했을때 즐겨찾기 삭제하는 메핑  -->
<delete id="deleteBid" parameterType="Bid">
	  delete from bid_list where fonky_member_id=#{memberId} and fonky_item_num=#{itemNum}
</delete>

	<!-- 리스트 뽑는 매퍼 -->
 <select id="itemList" resultMap="itemResultMap" resultType="ItemList" parameterType="hashmap">
	SELECT
	i.*,
	i.item_start_date <![CDATA[<]]> sysdate() started, 
	i.item_end_date &lt; sysdate() finished,
	m.member_nick
	FROM
	itemlist i
	JOIN
	memberlist m
	ON
	i.member_id = m.member_id
			<where>
		<if test="type == 'item_name'">
		item_name LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="type == 'memeber_nick'">
		member_nick LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="type == 'item_producer'">
		item_producer LIKE CONCAT('%', #{keyword}, '%')
	</if>
	</where>
	ORDER BY
		    CASE
        WHEN i.item_start_date <![CDATA[<]]> sysdate() AND i.item_end_date <![CDATA[>]]> sysdate() THEN 0
        WHEN i.item_start_date <![CDATA[<]]> sysdate() THEN 1
        ELSE 2
    END,
    CASE
        WHEN i.item_start_date <![CDATA[<]]> sysdate() AND i.item_end_date <![CDATA[>]]> sysdate() THEN i.item_start_date
        ELSE i.item_end_date
    END,
    i.item_start_date ASC
	
	 LIMIT ${startRow},#{num}
    </select>
    
	<!-- 헤더에 추가할 리스트 뽑는 매퍼 -->
     <select id="itemListH" resultMap="itemResultMap" resultType="ItemList">
SELECT
    i.*,
    i.item_start_date <![CDATA[<]]> sysdate() started, 
	i.item_end_date &lt; sysdate() finished,
    m.member_nick
FROM
    itemlist i
JOIN
    memberlist m
ON
    i.member_id = m.member_id
ORDER BY
  CASE
        WHEN i.item_start_date <![CDATA[<]]> sysdate() AND i.item_end_date <![CDATA[>]]> sysdate() THEN 0
        WHEN i.item_start_date <![CDATA[<]]> sysdate() THEN 1
        ELSE 2
    END,
    CASE
        WHEN i.item_start_date <![CDATA[<]]> sysdate() AND i.item_end_date <![CDATA[>]]> sysdate() THEN i.item_start_date
        ELSE i.item_end_date
    END,
    i.item_start_date ASC

    </select>
    
    <!-- 게시글 겟수 가저오는 메핑 -->
    <select id="getItemCount" resultType="int">
    	select Count(*) from itemList
    		<where>
		<if test="type == 'item_name'">
		item_name LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="type == 'memeber_nick'">
		member_nick LIKE CONCAT('%', #{keyword}, '%')
		</if>
		<if test="type == 'item_producer'">
		item_producer LIKE CONCAT('%', #{keyword}, '%')
	</if>
	</where>
    	
    </select>
    
    
     <!-- 특정리스트 뽑는 매퍼 -->
     <select id="getList" resultMap="itemResultMap"  resultType="ItemList">
    	select *,  item_start_date <![CDATA[<]]> sysdate() started, 
	item_end_date &lt; sysdate() finished from itemlist where item_num=#{itemNum}
    </select>
    
    <!-- 리스트 추가 매퍼 -->
    <insert id="insertList" parameterType="ItemList"
		useGeneratedKeys="true" keyProperty="itemNum">
    	insert into itemlist ( item_name, item_producer, item_content, item_price, item_file,item_start_date,item_end_date,member_id) 
    	values (#{itemName},#{itemProducer},#{itemContent},#{itemPrice},#{itemFile},#{itemStartDate},#{itemEndDate},#{memberId})
    </insert> 
    
    <!-- 리스트 수정 매퍼 -->
    <update id="updateList" parameterType="ItemList">
    	update itemlist set item_name=#{itemName}, item_producer=#{itemProducer}, item_content=#{itemContent}, 
    	item_price=#{itemPrice}, item_file=#{itemFile},item_start_date=#{itemStartDate} ,item_end_date=#{itemEndDate} where item_num=#{itemNum}
    </update>
    
    <!-- 리스트 삭제 매퍼 -->
    <delete id="deleteList" parameterType="ItemList">
    	delete from itemlist where item_num=#{itemNum}
    </delete>

    <resultMap id="itemResultMap" type="ItemList">
	    <id property="itemNum" column="item_num"/>
	    <result property="itemName" column="item_name"/>
	    <result property="itemProducer" column="item_producer"/>
	    <result property="itemContent" column="item_content"/>
	    <result property="itemPrice" column="item_price"/>
	    <result property="itemItr" column="item_itr"/>
	    <result property="itemDate" column="item_date" />
	    <result property="itemFile" column="item_file"/>
	    <result property="itemStartDate" column="item_start_date"/>
	    <result property="itemEndDate" column="item_end_date"/>
	    <result property="memberId" column="member_id"/>
	    <result property="started" column="started"/>
	    <result property="finished" column="finished"/>
	</resultMap>
    <resultMap id="BidResultMap" type="Bid">
	    <id property="bidNum" column="bid_num"/>
	    <result property="fonkyMemberId" column="fonky_member_id"/>
	    <result property="fonkyItemNum" column="fonky_item_num"/>
	    <result property="bidItr" column="bid_itr"/>
	</resultMap>
	

</mapper>